# Generated by Django 4.2.16 on 2024-12-06 15:16

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
import phonenumber_field.modelfields
import timezone_field.fields
import users.model_mixins
import uuid
import yamlfield.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('data_quality', models.SmallIntegerField(default=50, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('data_source', models.CharField(default='System', max_length=30)),
                ('first_name', models.CharField(blank=True, db_index=True, max_length=30, null=True, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, db_index=True, max_length=30, null=True, verbose_name='last name')),
                ('keycloak_id', models.UUIDField(blank=True, editable=False, null=True, unique=True)),
                ('country', django_countries.fields.CountryField(blank=True, help_text='Optional', max_length=2, null=True)),
                ('timezone', timezone_field.fields.TimeZoneField(default='Europe/Dublin', help_text='Default timezone for this user')),
                ('user_source', models.CharField(default='Unknown', help_text='How or where did this user get created', max_length=20)),
                ('profile', models.JSONField(blank=True, default=dict, help_text='Free form info related to this users profile')),
                ('active', models.BooleanField(db_index=True, default=True)),
                ('username', models.CharField(blank=True, max_length=254, null=True)),
                ('extra_roles', models.CharField(blank=True, help_text='Additional roles for this user', max_length=100, null=True)),
                ('initial_ip', models.GenericIPAddressField(blank=True, editable=False, help_text='use to delete users that are bots', null=True)),
                ('org_types', models.CharField(blank=True, help_text='eg. Pure Dressage, Eventing, Pony Club, Riding Club (Optional)', max_length=50, null=True, verbose_name='Organisation types involved with')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('removed_date', models.DateTimeField(blank=True, null=True)),
                ('subscribe_news', models.DateTimeField(blank=True, null=True)),
                ('unsubscribe_news', models.DateTimeField(blank=True, null=True)),
                ('event_notifications_subscribed', models.DateTimeField(blank=True, null=True)),
                ('event_notifications_unsubscribed', models.DateTimeField(blank=True, null=True)),
                ('status', models.PositiveSmallIntegerField(choices=[(0, 'Unknown'), (1, 'Not Applicable'), (3, 'Unconfirmed'), (4, 'Confirmed'), (5, 'Trial'), (7, 'Subscribed'), (8, 'Trial Lapsed'), (9, 'Subscription Lapsed')], db_index=True, default=3)),
                ('trial_ends', models.DateTimeField(blank=True, null=True)),
                ('subscription_ends', models.DateTimeField(blank=True, null=True)),
                ('renew', models.BooleanField(default=False)),
                ('activation_code', models.IntegerField(blank=True, null=True)),
                ('free_account', models.BooleanField(default=False, help_text='No attempt to get subscription will be made on a free account', verbose_name='Free Account')),
                ('usergroups', yamlfield.fields.YAMLField(default=dict, help_text='Groups this user belongs to in Keycloak')),
                ('usertype', models.CharField(choices=[('User', 'User'), ('Admin', 'Admin'), ('CAdmin', 'Customer Administrator'), ('System', 'System/API'), ('Factory', 'Factory')], db_index=True, default='User', max_length=8, verbose_name='Primary User Type')),
                ('usertypes', models.CharField(blank=True, help_text='All permissions granted to user', max_length=100, null=True, verbose_name='All User Types')),
                ('default_key', models.CharField(blank=True, editable=False, help_text='browser key used for uploads', max_length=20, null=True)),
                ('renew_permissions', models.DateTimeField(blank=True, help_text='Check with users ok to use cookies when date expires', null=True)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CommsChannel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('channel_type', models.CharField(choices=[('email', 'Email'), ('sms', 'SMS')], max_length=10)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('mobile', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None)),
                ('verified_at', models.DateTimeField(blank=True, null=True)),
                ('note', models.CharField(blank=True, max_length=100, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comms_channels', to=settings.AUTH_USER_MODEL)),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='comms_channels_verified', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataQualityLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created Date')),
                ('ref', models.CharField(db_index=True, max_length=10)),
                ('reason_type', models.CharField(default='None', help_text='Reason for change in quality', max_length=60)),
                ('data_quality', models.SmallIntegerField(validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(100)])),
                ('data_comment', models.TextField(blank=True, null=True)),
                ('data_source', models.CharField(default='Data entry', help_text='notes on source of data - may be url', max_length=200)),
                ('creator', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(app_label)s_%(class)s_creator', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Organisation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created Date')),
                ('updated', models.DateTimeField(blank=True, db_index=True, editable=False, null=True, verbose_name='Updated Date')),
                ('name', models.CharField(db_index=True, max_length=50, verbose_name='Organisation Name')),
                ('test', models.BooleanField(db_index=True, default=False)),
                ('active', models.BooleanField(db_index=True, default=True)),
                ('country', django_countries.fields.CountryField(blank=True, max_length=2, null=True)),
                ('home_page', models.URLField(blank=True, null=True)),
                ('logo_link_large', models.ImageField(blank=True, null=True, upload_to='logo/organisation/')),
                ('logo_link_small', models.ImageField(blank=True, null=True, upload_to='logo/organisation/')),
                ('code', models.CharField(help_text='Max 10 chars upper case.  Used to tag data as belonging to the organisation', max_length=8)),
                ('description', models.TextField(blank=True, null=True)),
                ('settings', models.JSONField(blank=True, default=dict, help_text='Settings for this organisation')),
                ('creator', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creator', to=settings.AUTH_USER_MODEL)),
                ('updator', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_updator', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created Date')),
                ('updated', models.DateTimeField(blank=True, db_index=True, editable=False, null=True, verbose_name='Updated Date')),
                ('status', models.CharField(choices=[('P', 'Pending Approval'), ('L', 'Live'), ('A', 'Archived'), ('X', 'Alias')], db_index=True, default='L', max_length=1, verbose_name='Status')),
                ('data_quality', models.SmallIntegerField(default=50, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('data_source', models.CharField(default='System', max_length=30)),
                ('ref', models.CharField(max_length=6, primary_key=True, serialize=False)),
                ('formal_name', models.CharField(help_text='Full name including salution', max_length=50, verbose_name='formal name')),
                ('sortable_name', models.CharField(blank=True, max_length=130, verbose_name='sortable, eg. last name then first name')),
                ('friendly_name', models.CharField(blank=True, help_text='Short name used in groups', max_length=30, null=True, verbose_name='friendly name')),
                ('dob', models.DateField(blank=True, null=True)),
                ('identifier_type', models.CharField(choices=[('E', 'Email'), ('P', 'Phone')], default='E', max_length=1)),
                ('identifier', models.CharField(blank=True, max_length=50, null=True, unique=True)),
                ('country', django_countries.fields.CountryField(blank=True, help_text='Optional', max_length=2, null=True)),
                ('timezone', timezone_field.fields.TimeZoneField(default='UTC', help_text='Default timezone for this user')),
                ('alias_for', models.ForeignKey(blank=True, help_text='This name is an alias for a live instance', limit_choices_to={'status': 'L'}, null=True, on_delete=django.db.models.deletion.CASCADE, to='users.person')),
                ('creator', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creator', to=settings.AUTH_USER_MODEL)),
                ('current_quality', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='users.dataqualitylog')),
            ],
            options={
                'verbose_name': 'person',
                'verbose_name_plural': 'people',
                'ordering': ['sortable_name'],
                'abstract': False,
            },
            bases=(models.Model, users.model_mixins.TrackChangesMixin),
        ),
        migrations.CreateModel(
            name='VerificationCode',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=6)),
                ('expires_at', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('attempts', models.PositiveIntegerField(default=0)),
                ('channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.commschannel')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='verification_codes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserContact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contact_date', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('method', models.CharField(max_length=40)),
                ('notes', models.TextField(blank=True, null=True)),
                ('data', models.TextField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PersonOrganisation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created Date')),
                ('updated', models.DateTimeField(blank=True, db_index=True, editable=False, null=True, verbose_name='Updated Date')),
                ('membership_id', models.CharField(blank=True, max_length=30, null=True)),
                ('membership_starts', models.DateTimeField(blank=True, null=True)),
                ('membership_ends', models.DateTimeField(blank=True, null=True)),
                ('membership_type', models.CharField(blank=True, max_length=40, null=True)),
                ('creator', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creator', to=settings.AUTH_USER_MODEL)),
                ('organisation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.organisation')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.person')),
                ('updator', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_updator', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='person',
            name='organisation',
            field=models.ManyToManyField(through='users.PersonOrganisation', to='users.organisation'),
        ),
        migrations.AddField(
            model_name='person',
            name='updator',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_updator', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='person',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='person_user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='customuser',
            name='current_quality',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='users.dataqualitylog'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='organisation',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='users.organisation'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='person',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='users.person'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='preferred_channel',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='users.commschannel'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created Date')),
                ('updated', models.DateTimeField(blank=True, db_index=True, editable=False, null=True, verbose_name='Updated Date')),
                ('ref', models.CharField(blank=True, max_length=7, null=True, unique=True)),
                ('role_type', models.CharField(choices=[('J', 'Judge'), ('O', 'Organiser'), ('R', 'Competitor'), ('B', 'Scorer'), ('S', 'Scorer Pro'), ('E', 'Steward'), ('W', 'Writer'), ('G', 'Dogsbody'), ('L', 'Leader'), ('K', 'Trainee Judge'), ('A', 'Administrator'), ('M', 'Event Manager'), ('I', 'Issuer'), ('D', 'Default')], max_length=1)),
                ('name', models.CharField(db_index=True, max_length=60, verbose_name='Name')),
                ('level', models.CharField(blank=True, max_length=20, null=True, verbose_name='List')),
                ('credentials', models.CharField(blank=True, max_length=254, null=True, verbose_name='List of credentials')),
                ('country', django_countries.fields.CountryField(blank=True, help_text='Optional', max_length=2, null=True)),
                ('active', models.BooleanField(db_index=True, default=True)),
                ('comments', models.TextField(blank=True, null=True)),
                ('creator', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creator', to=settings.AUTH_USER_MODEL)),
                ('organisation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='users.organisation')),
                ('person', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='role_person', to='users.person')),
                ('updator', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_updator', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='role_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
                'indexes': [models.Index(fields=['user', 'active', 'role_type'], name='users_role_user_id_e33e41_idx')],
            },
        ),
    ]
